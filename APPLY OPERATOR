In SQL Server, the `OUTER APPLY` is a powerful operator that works similarly to a `LEFT JOIN`, but it allows you to invoke a table-valued function or correlated subquery for each row from the left-hand table and join it with the result of the right-hand table or subquery.

https://chatgpt.com/share/66e8f5f0-cde0-8002-80ed-d4aff7dcd145

### Key Points:
- **`APPLY` Operator**: `APPLY` is used to join a table with the result of a table-valued function or a correlated subquery.
- **`CROSS APPLY` vs. `OUTER APPLY`**:
  - `CROSS APPLY`: Works like an inner join, only returns rows where the subquery or function on the right side returns results.
  - **`OUTER APPLY`**: Works like a left join, returning all rows from the left-hand table and including rows from the right-hand side where applicable. If the right side does not return a result, `NULL` values are returned.

### Syntax:
```sql
SELECT columns
FROM table1
OUTER APPLY (subquery or table-valued function) AS alias;
```

### Use Cases:
- `OUTER APPLY` is commonly used when the right side of the join depends on the row being processed from the left side. It's useful when the logic of joining requires row-by-row evaluation.

### Example with a Correlated Subquery:

Suppose we have two tables: `employees` and `sales`, and we want to get each employee and their latest sale (if available).

```sql
SELECT e.emp_id, e.emp_name, s.sale_amount, s.sale_date
FROM employees e
OUTER APPLY
(
    SELECT TOP 1 sale_amount, sale_date
    FROM sales s
    WHERE s.emp_id = e.emp_id
    ORDER BY s.sale_date DESC
) AS s;
```

#### Explanation:
- `OUTER APPLY` is used to invoke the subquery for each row in `employees`.
- For each employee (`e`), the subquery returns the most recent sale (`TOP 1 ... ORDER BY sale_date DESC`).
- If no sales are available for an employee, `NULL` values are returned for the sales columns due to `OUTER APPLY`.

### Use Case with a Table-Valued Function:

If you have a table-valued function that returns a set of data for each row in the outer table:

```sql
SELECT e.emp_id, e.emp_name, f.result_column
FROM employees e
OUTER APPLY dbo.some_function(e.emp_id) AS f;
```

In this case, `OUTER APPLY` invokes the `some_function` for each employee. If the function returns no results for a particular employee, `NULL` will be returned for that employeeâ€™s `result_column`. 

### Benefits:
- **Row-by-Row Processing**: `OUTER APPLY` can evaluate subqueries or functions for each row, making it useful for dynamic row-based operations.
- **More Flexibility**: It allows more complex scenarios than a simple `LEFT JOIN`, where the join logic may not fit a static one-to-one or one-to-many relationship.
