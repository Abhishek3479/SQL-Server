
Conclusion-> comparision of any value(null or not null) with NULL always return False value.
comparision using [=, !=, in, not in, any, all] etc operators always return False if there is null value on lhs or rhs side.

for ex-> 2  not in(3,4, null, 5)  
on comparing 
2!=3 return True
2!=4 return True
2!=null return False
2!=5 return True

so final comparision
[True, True, False, True]
taking &(and) of above all return False

-- Step 1: Create the table
CREATE TABLE bst (
    n INT,
    p INT
);

-- Step 2: Insert the data
INSERT INTO bst (n, p) VALUES
(1, 2),
(3, 2),
(5, 6),
(7, 6),
(2, 4),
(6, 4),
(4, 15),
(8, 9),
(10, 9),
(12, 13),
(14, 13),
(9, 11),
(13, 11),
(11, 15),
(15, NULL);


-- select * from bst
/*

         n           p          
    ----------- -------------
          1           2
          3           2
          5           6
          7           6
          2           4
          6           4
          4          15
          8           9
         10           9
         12          13
         14          13
          9          11
         13          11
         11          15
         15        NULL
         
         


select n from bst where n in(select distinct p from bst)

         n          
      -----------
          2
          6
          4
          9
         13
         11
         15



but when we do 

select n from bst where n not in(select distinct p from bst)

then output is empty

The issue arises because of the behavior of SQL's `NOT IN` when dealing with `NULL` values.

### Root Cause
1. **Presence of `NULL` in the Subquery**:
   - The subquery `SELECT DISTINCT p FROM bst` includes a `NULL` value because there is a row `(15, NULL)` in the table.
   - When SQL evaluates `NOT IN`, it checks if the value does **not** exist in the list returned by the subquery.
   - If the subquery contains a `NULL`, any comparison with `NULL` results in an unknown value (`NULL`), causing the entire condition to evaluate to `FALSE`.

   For example, when evaluating:
   ```sql
   WHERE n NOT IN (2, 6, 4, 9, 13, 11, 15, NULL)
   ```
   Any comparison with `NULL` (e.g., `n != NULL`) is `NULL` (not true), so no rows are selected.

### Solution
To handle this, exclude `NULL` from the subquery explicitly using a `WHERE` clause. Here's the corrected query:


SELECT n FROM bst WHERE n NOT IN (SELECT DISTINCT p FROM bst WHERE p IS NOT NULL

### Explanation of Fix
- `WHERE p IS NOT NULL` ensures that the subquery only returns non-`NULL` values, preventing `NOT IN` from being impacted by the presence of `NULL`.

### Expected Output
For the given table, this query will correctly return:

| n  |
|----|
| 1  |
| 3  |
| 5  |
| 7  |
| 8  |
| 10 |
| 12 |
| 14 |

*/
